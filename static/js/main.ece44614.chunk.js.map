{"version":3,"sources":["components/NavBar/NavBar.component.jsx","components/NewsItem/NewsItem.component.jsx","components/NewsDetails/NewsDetails.component.jsx","services/utility.service.js","components/Button/Button.component.jsx","components/NewsCard/NewsCard.component.jsx","services/localStorage.service.js","services/api.service.js","pages/News/NewsPage.jsx","routes/routes.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["NavBar","className","NewsItem","caption","value","NewsDetails","title","url","author","createdAt","urlString","split","filter","item","scheme","domain","getShortURL","href","dateString","date","Date","getDate","1","2","3","4","5","6","7","8","9","10","11","12","getMonth","getFullYear","getFormattedDate","defaultProps","Button","children","clickHandler","disabled","type","onClick","NewsCard","news","created_at","comments","num_comments","id","objectID","points","upvoteHandler","hideNewsHandler","size","setItem","key","localStorage","JSON","stringify","error","getItem","parse","updateModifiedEntries","modifiedEntry","modifiedEntries","updatedEntries","NewsPage","useState","loading","setLoading","noContent","setNoContent","setNews","useEffect","pageNumber","fetch","then","res","json","transformedData","hits","map","hide","undefined","Promise","resolve","getNews","length","catch","onHideNews","modifiedNews","modifiedItem","onUpvote","Routes","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ece44614.chunk.js","sourcesContent":["import React from 'react';\n\nimport './NavBar.component.scss';\n\nconst NavBar = () => (\n  <nav className=\"nav-bar\">\n    <div className=\"nav-bar__container container\">\n      <h5 className=\"t-h5\">Hackernews Clone</h5>\n    </div>\n  </nav>\n);\n\nexport default NavBar;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './NewsItem.component.scss';\n\nconst NewsItem = ({ caption, value }) => (\n  <div className=\"news-item\">\n    <section className=\"news-item__caption t-caption\">{caption}</section>\n    <section className=\"news-item__value t-body-2\">{value}</section>\n  </div>\n);\n\nNewsItem.propTypes = {\n  caption: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n};\n\nexport default NewsItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getShortURL, getFormattedDate } from '../../services/utility.service';\n\nimport './NewsDetails.component.scss';\n\nconst NewsDetails = ({ title, url, author, createdAt }) => {\n  const urlString = url ? `(${getShortURL(url)})` : '';\n  return (\n    <>\n      <span>{title}</span>\n      <a className=\"t-caption color-light\" href={url}>\n        {' '}\n        {urlString}\n      </a>\n      <span>\n        <span className=\"t-caption color-light\"> by</span> {author}\n      </span>\n      <span>\n        <span className=\"t-caption color-light\"> on</span>{' '}\n        {getFormattedDate(createdAt)}\n      </span>\n    </>\n  );\n};\n\nNewsDetails.propTypes = {\n  title: PropTypes.string,\n  url: PropTypes.string,\n  author: PropTypes.string,\n  createdAt: PropTypes.string,\n};\n\nNewsDetails.defaultProps = {\n  title: '',\n  url: '',\n  author: '',\n  createdAt: '',\n};\n\nexport default NewsDetails;\n","/**\n * This function will provide the shortened URL\n * @param {*} url - String value of the URL to be shortened\n */\nexport const getShortURL = (url) => {\n  if (url) {\n    const [scheme, domain] = url.split('/').filter((item) => item !== '');\n    return `${scheme}//${domain}`;\n  }\n  return '';\n};\n\n/**\n * This function will format the date.\n * @param {*} dateString - DateTime string\n */\nexport const getFormattedDate = (dateString) => {\n  const monthsShortName = {\n    1: 'Jan',\n    2: 'Feb',\n    3: 'Mar',\n    4: 'Apr',\n    5: 'May',\n    6: 'Jun',\n    7: 'Jul',\n    8: 'Aug',\n    9: 'Sept',\n    10: 'Oct',\n    11: 'Nov',\n    12: 'Dec',\n  };\n  const date = new Date(dateString);\n  return `${date.getDate()}th ${\n    monthsShortName[date.getMonth() + 1]\n  }, ${date.getFullYear()}`;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Button.component.scss';\n\nconst Button = ({ children, clickHandler, disabled }) => (\n  <button\n    className=\"button t-button\"\n    type=\"button\"\n    disabled={disabled}\n    onClick={disabled ? () => null : clickHandler}\n  >\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]).isRequired,\n  clickHandler: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  disabled: false,\n};\n\nexport default Button;\n","import React from 'react';\nimport { MdArrowUpward } from 'react-icons/md';\nimport Proptypes from 'prop-types';\n\nimport NewsItem from '../NewsItem/NewsItem.component';\nimport NewsDetails from '../NewsDetails/NewsDetails.component';\n\nimport './NewsCard.component.scss';\nimport Button from '../Button/Button.component';\n\nconst NewsCard = ({\n  news: {\n    author,\n    created_at: createdAt,\n    num_comments: comments,\n    objectID: id,\n    points,\n    title,\n    url,\n  },\n  upvoteHandler,\n  hideNewsHandler,\n}) => {\n  return (\n    <div className=\"news-card\">\n      {/* All the items related to news */}\n      <section className=\"news-card__details\">\n        <div className=\"news-card__details__container1\">\n          <NewsItem caption=\"Comments\" value={comments || 0} />\n          <NewsItem caption=\"Vote Counts\" value={points || 0} />\n        </div>\n        <div className=\"news-card__details__container2\">\n          <NewsItem\n            caption=\"News Details\"\n            value={\n              <NewsDetails\n                title={title}\n                url={url}\n                author={author}\n                createdAt={createdAt}\n              />\n            }\n          />\n        </div>\n      </section>\n      {/* User action for the news */}\n      <section className=\"news-card__actions\">\n        <MdArrowUpward\n          className=\"upvote-icon\"\n          size=\"24\"\n          onClick={() => upvoteHandler(id)}\n        />\n        <Button clickHandler={() => hideNewsHandler(id)}>Hide</Button>\n      </section>\n    </div>\n  );\n};\n\nNewsCard.propTypes = {\n  news: Proptypes.shape({\n    author: Proptypes.string,\n    created_at: Proptypes.string,\n    num_comments: Proptypes.number,\n    objectID: Proptypes.string,\n    points: Proptypes.number,\n    title: Proptypes.string,\n    url: Proptypes.string,\n  }).isRequired,\n  upvoteHandler: Proptypes.func.isRequired,\n  hideNewsHandler: Proptypes.func.isRequired,\n};\n\nexport default NewsCard;\n","export const setItem = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    /* Leaving the catch block */\n  }\n};\n\nexport const getItem = (key) => {\n  try {\n    const value = localStorage.getItem(key);\n    return JSON.parse(value);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const removeItem = (key) => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    /* Leaving the catch block */\n  }\n};\n\nexport const clearStorage = () => {\n  try {\n    localStorage.clear();\n  } catch (error) {\n    /* Leaving the catch block */\n  }\n};\n","import { getItem, setItem } from './localStorage.service';\n\n/**\n * This function will fetch the NEWS provided the page number.\n * @param {*} pageNumber - Page number\n * @returns {Promise<any>}\n */\nexport const getNews = (pageNumber = 1) => {\n  const url = `https://hn.algolia.com/api/v1/search?page=${pageNumber}`;\n  const modifiedEntries = getItem('MODIFIED_ENTRIES');\n  return fetch(url)\n    .then((res) => res.json())\n    .then(({ hits }) => {\n      const transformedData = hits\n        /* Add additional `hide` property on each item for UI purposes */\n        .map((item) => ({\n          ...item,\n          hide: false,\n        }))\n        /* If the item present in the modified entries, replace the original item with the modified one */\n        .map((item) => {\n          if (modifiedEntries[item.objectID] !== undefined) {\n            return modifiedEntries[item.objectID];\n          }\n          return item;\n        })\n        /* Filter out all the hidden items */\n        .filter((item) => !item.hide);\n      return Promise.resolve(transformedData);\n    });\n};\n\n/**\n * This function will update the localstorage with the modified entries.\n * A modified entry will have two cases:\n * 1. More votes are added\n * 2. Hidden action is taken\n *\n * `MODIFIED_ENTRIES` object will be updated in the localstorage with the new\n * updated value.\n * @param {*} modifiedEntry - Modified news item object\n */\nexport const updateModifiedEntries = (modifiedEntry) => {\n  const modifiedEntries = getItem('MODIFIED_ENTRIES');\n  const updatedEntries = {\n    ...modifiedEntries,\n    [modifiedEntry.objectID]: modifiedEntry,\n  };\n  setItem('MODIFIED_ENTRIES', updatedEntries);\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\n\nimport NewsCard from '../../components/NewsCard/NewsCard.component';\n\nimport { getNews, updateModifiedEntries } from '../../services/api.service';\n\nimport './NewsPage.scss';\n\nexport default function NewsPage() {\n  const [loading, setLoading] = useState(true);\n  const [noContent, setNoContent] = useState(false);\n  const [news, setNews] = useState([]);\n\n  useEffect(() => {\n    getNews()\n      .then((res) => {\n        setLoading(false);\n        if (!res.length) {\n          setNoContent(true);\n        }\n        setNews(res);\n      })\n      .catch(() => {\n        setLoading(false);\n        setNoContent(true);\n        setNews([]);\n      });\n  }, []);\n\n  /**\n   * This is a callback function which will trigger the upvote action on a card.\n   * @param {*} id - Unique id of the news item\n   */\n  const onUpvote = (id) => {\n    const modifiedNews = news.map((item) => {\n      if (item.objectID === id) {\n        const modifiedItem = { ...item, points: item.points + 1 };\n        updateModifiedEntries(modifiedItem);\n        return modifiedItem;\n      }\n      return item;\n    });\n    setNews(modifiedNews);\n  };\n\n  /**\n   * This is a callback function which will trigger the hide action on a card.\n   * @param {*} id - Unique id of the news item\n   */\n  const onHideNews = (id) => {\n    const modifiedNews = news\n      .map((item) => {\n        if (item.objectID === id) {\n          const modifiedItem = { ...item, hide: true };\n          updateModifiedEntries(modifiedItem);\n          return modifiedItem;\n        }\n        return item;\n      })\n      .filter((item) => !item.hide);\n\n    setNews(modifiedNews);\n    if (!modifiedNews.length) {\n      setNoContent(true);\n    }\n  };\n\n  return (\n    <div className=\"news container\">\n      {loading && <div className=\"loading\">Loading News...</div>}\n      {noContent && <div className=\"no-content\">No news found!</div>}\n      {news.map((item) => (\n        <NewsCard\n          key={item.objectID}\n          news={item}\n          upvoteHandler={() => onUpvote(item.objectID)}\n          hideNewsHandler={onHideNews}\n        />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { Route, Switch } from 'react-router-dom';\n\nimport NewsPage from '../pages/News/NewsPage';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={NewsPage} />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport NavBar from './components/NavBar/NavBar.component';\nimport Routes from './routes/routes';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <NavBar />\n        <Routes />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport { getItem, setItem } from './services/localStorage.service';\n\nimport './index.scss';\n\n/* Setup the modified entries if not already set */\nif (getItem('MODIFIED_ENTRIES') === null) {\n  setItem('MODIFIED_ENTRIES', {});\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}